Shader "UI/Default-old" {
	Properties {
		_uMainTex ("Sprite Texture", 2D) = "white" {}
		_uColor ("Tint", Color) = (1,1,1,1)
		_uMainTex_ST ("st", Vector) = (1,1,0,0)
		
		_uStencilComp ("Stencil Comparison", Float) = 7
		_uStencil ("Stencil ID", Float) = 0
		_uStencilOp ("Stencil Operation", Float) = 0
		_uStencilWriteMask ("Stencil Write Mask", Float) = 255
		_uStencilReadMask ("Stencil Read Mask", Float) = 255
		
		_uCullMode ("Cull Mode", Float) = 0
		_uColorMask ("Color Mask", Float) = 15
	}
	SubShader {
		Tags {        
			"Queue"="Transparent"
            "PreviewType"="Plane"
			}

		Pass {
			Stencil
			{
				Ref [_uStencil]
				Comp [_uStencilComp]
				Pass [_uStencilOp] 
				ReadMask [_uStencilReadMask]
				WriteMask [_uStencilWriteMask]
			}

			Cull [_uCullMode]
			ZWrite Off
			ZTest [gGUIZTestMode]
			Blend SrcAlpha OneMinusSrcAlpha
			ColorMask [_uColorMask]
		
			CGPROGRAM
			
			#include "CG.cginc"
			#include "UI.cginc"		
					
			#pragma multi_compile_local __ UI_CLIP_RECT
            #pragma multi_compile_local __ UI_ALPHACLIP
			
			uniform sampler2D _uMainTex;
            uniform float4 _uMainTex_ST;
			uniform float4 _uColor;
			uniform float4 gTextureSampleAdd;
			uniform float4 gClipRect;

			struct appdata_t {
				float4 pos   : POSITION;
                float4 color    : COLOR;
                float2 uv : TEXCOORD0;
			};
			struct v2f {
				float4 pos   : SV_POSITION;
                fixed4 color    : COLOR;
                float2 uv  : TEXCOORD0;
                float4 worldpos : TEXCOORD1;
			};
			v2f vert (appdata_t v) {
				v2f o;
				o.pos = mul( uMVPMatrix, v.pos );
				o.uv = TRANSFORM_TEX(v.uv, _uMainTex);
				o.worldpos = mul( uMMatrix, v.pos );
				o.color = v.color * _uColor;
				return o;
			}
			float4 frag(v2f i) : SV_TARGET {
				
				float4 color = i.color * (tex2D(_uMainTex, i.uv) + gTextureSampleAdd)  ;
				#ifdef UI_CLIP_RECT
					color.a *= get2DClipping(i.worldpos.xy, gClipRect);
				#endif

				#ifdef UI_ALPHACLIP
					clip (color.a - 0.001);
				#endif
				
				return color;
			}
			
			ENDCG
		}
	}
}