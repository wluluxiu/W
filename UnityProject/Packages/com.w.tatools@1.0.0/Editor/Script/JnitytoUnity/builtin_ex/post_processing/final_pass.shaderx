Shader "postprocessing/finalPass" {
	Properties {
		_uMainTex ( "main texture", 2D ) = "" {}
	}

	SubShader {

		Pass {
		    Cull Off 
		    ZWrite Off
		    ZTest Always

			CGPROGRAM
			
            #pragma multi_compile_local __ FXAA FXAA_LOW
            #pragma multi_compile_local __ FXAA_KEEP_ALPHA FXAA_NO_ALPHA

            #if FXAA_KEEP_ALPHA || FXAA_NO_ALPHA
                #define FXAA_GREEN_AS_LUMA 1
            #else
                #define FXAA_GREEN_AS_LUMA 0
            #endif

            #if FXAA_LOW
                #define FXAA_QUALITY__PRESET 12
                #define FXAA_QUALITY_SUBPIX 1.0
                #define FXAA_QUALITY_EDGE_THRESHOLD 0.166
                #define FXAA_QUALITY_EDGE_THRESHOLD_MIN 0.0625
            #else
                #define FXAA_QUALITY__PRESET 28
                #define FXAA_QUALITY_SUBPIX 1.0
                #define FXAA_QUALITY_EDGE_THRESHOLD 0.063
                #define FXAA_QUALITY_EDGE_THRESHOLD_MIN 0.0312
            #endif

            #include "fxaa.cginc"

			uniform sampler2D _uMainTex;
			uniform float4 _uMainTex_TexelSize;

			struct appdata_t {
				float4 pos : POSITION;
				float2 uv : TEXCOORD0;
			};
			struct v2f {
				float4 pos : SV_POSITION;
				float2 uv : TEXCOORD0;
			};
			
			v2f vert (appdata_t v) {
				v2f o;
				o.pos = mul( uMVPMatrix, v.pos );
				o.uv = v.uv;
				return o;
			}
			float4 frag(v2f i) : SV_TARGET {
                float4 color = 0.0;

                #if FXAA || FXAA_LOW
                    color = FxaaPixelShader(
                        i.uv,         
                        _uMainTex,    
                        _uMainTex_TexelSize.zw,  
                        FXAA_QUALITY_SUBPIX,
                        FXAA_QUALITY_EDGE_THRESHOLD,
                        FXAA_QUALITY_EDGE_THRESHOLD_MIN
                    );

                    #if FXAA_KEEP_ALPHA
                        color.a = tex2D(_uMainTex, i.uv).a;
                    #endif
                #else
                    color = tex2D(_uMainTex, i.uv);
                #endif

                return color;
			}
			
			ENDCG
		}
	}
}