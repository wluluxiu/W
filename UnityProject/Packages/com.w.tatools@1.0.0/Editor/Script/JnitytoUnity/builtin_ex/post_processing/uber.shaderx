Shader "postprocessing/uber" {
	Properties {
		_uMainTex ( "main texture", 2D ) = "" {}
		
		// Bloom
		_uBloom_Settings("bloom setting",Vector) = (1, 1, 1, 1)
		_uBloom_Color("bloom color",Color) = (1, 1, 1, 1)

		// Color Grading
		//_Lut2D("lut2D texture", 2D ) = "" {}
		_Lut2D_Params("lut2D params", Vector) = (0, 0, 0, 0)
		_PostExposure("PostExposure", Float) = 1
		_LumaInAlpha("Luma in Alpha", Float) = 1
	}

	SubShader {
		Cull Off 
		ZTest Always
		ZWrite Off

		Pass {
			CGPROGRAM

			#include "sampling.cginc"
			#include "Colors.cginc"

			#pragma multi_compile_local __ BLOOM BLOOM_LOW
			#pragma multi_compile_local __ COLOR_GRADING_LDR_2D COLOR_GRADING_HDR_2D COLOR_GRADING_HDR_3D
			#pragma multi_compile_local __ FINALPASS

			uniform sampler2D _uMainTex;
			uniform float4 _uMainTex_TexelSize;
			uniform float4 _uColor;

			// Bloom
			uniform sampler2D _uBloomTex;
			uniform float4 _uBloomTex_TexelSize;
			uniform float4 _uBloom_Settings; // x: sampleScale, y: intensity, z: dirt intensity
       		uniform float4 _uBloom_Color;

			// Color Grading
			uniform sampler2D _Lut2D;
			float4 _Lut2D_Params;
			float _PostExposure;

			// fxaa
			uniform float _LumaInAlpha;

			struct appdata_t {
				float4 pos : POSITION;
				float2 uv : TEXCOORD0;
			};
			struct v2f {
				float4 pos : SV_POSITION;
				float2 uv : TEXCOORD0;
			};

			v2f vert (appdata_t v) {
				v2f o;
				o.pos = mul( uMVPMatrix, v.pos );
				o.uv = v.uv;
				return o;
			}

			float4 frag(v2f i) : SV_TARGET {
				float4 color = tex2D(_uMainTex,  i.uv);

				#if defined(BLOOM) || defined(BLOOM_LOW)
				{
					#if defined(BLOOM)
						float4 bloom = UpsampleTent(_uBloomTex, i.uv, _uBloomTex_TexelSize.zw, _uBloom_Settings.x);
					#else
						float4 bloom = UpsampleBox(_uBloomTex, i.uv, _uBloomTex_TexelSize.zw, _uBloom_Settings.x);
					#endif

					bloom *= _uBloom_Settings.y;
					color += bloom * float4(_uBloom_Color.xyz, 1.0);
				}
				#endif

				#if defined(COLOR_GRADING_HDR_3D)
					//color *= _PostExposure;
					//float3 colorLutSpace = saturate(LUT_SPACE_ENCODE(color.rgb));
					//color.rgb = ApplyLut3D(TEXTURE3D_PARAM(_Lut3D, sampler_Lut3D), colorLutSpace, _Lut3D_Params);
				#elif defined(COLOR_GRADING_HDR_2D)
				 	color *= _PostExposure;
				 	float3 colorLutSpace = saturate(LUT_SPACE_ENCODE(color.rgb));
				 	color.rgb = ApplyLut2D(TEXTURE2D_ARGS(_Lut2D, sampler_Lut2D), colorLutSpace, _Lut2D_Params);
					//color = LinearToSRGB(SAMPLE_TEXTURE2D(_Lut2D, sampler_Lut2D, i.uv));
					//color = LinearToSRGB(color);// Jnity's color space is Gamma2.1
				#elif defined(COLOR_GRADING_LDR_2D)
				 	color = saturate(color);

				 	// LDR Lut lookup needs to be in sRGB - for HDR stick to linear
				 	color.rgb = LinearToSRGB(color.rgb);
				 	color.rgb = ApplyLut2D(TEXTURE2D_ARGS(_Lut2D, sampler_Lut2D), color.rgb, _Lut2D_Params);
				 	color.rgb = SRGBToLinear(color.rgb);
					//color = LinearToSRGB(color); // Jnity's color space is Gamma2.1
					//color = LinearToSRGB(SAMPLE_TEXTURE2D(_Lut2D, sampler_Lut2D, i.uv));
					//color = SAMPLE_TEXTURE2D(_Lut2D, sampler_Lut2D, i.uv);
				#endif

				#if !FINALPASS
					if(_LumaInAlpha > 0.5){
						color.a = Luminance(saturate(color));
					}
				#endif

				return color;
			}

			ENDCG
		}
	}
}