Shader "postprocessing/motionBlur" {
	Properties {
		_uMainTex ( "Main Texture", 2D ) = "" {}
		_uBlurAmount("Blur Amount", float) = 0.5
	}
    
    CGINC

	#include "CG.cginc"

    uniform sampler2D _uMainTex;
    uniform sampler2D _uAccumTexture;
	uniform float _uBlurAmount;

    struct appdata_t {
		float4 vertex : POSITION;
		float2 uv : TEXCOORD;
	};

	struct v2f {
		float4 vertex : SV_POSITION;
		float2 uv : TEXCOORD;
	};

    v2f vert (appdata_t v)
	{
		v2f o;
		o.vertex = mul(uMVPMatrix, v.vertex);
		o.uv = v.uv;
		return o;
	}
    
    float4 fragRGB (v2f i) : SV_Target {
        float4 src = tex2D(_uMainTex, i.uv);
        float4 dst = tex2D(_uAccumTexture, i.uv);
        if(abs(src.r - dst.r) < 0.04) dst.r = src.r;
        if(abs(src.g - dst.g) < 0.04) dst.g = src.g;
        if(abs(src.b - dst.b) < 0.04) dst.b = src.b;
        float4 res = src * _uBlurAmount + dst * (1 - _uBlurAmount);
        return float4(res.rgb, src.a);
        // return float4(tex2D(_uMainTex, i.uv).rgb, _uBlurAmount);
    }
    
    // float4 fragA (v2f i) : SV_Target {
    //     return tex2D(_uMainTex, i.uv);
    // }
    
    ENDCG

    SubShader {
        
        ZTest Always
        Cull Off
        ZWrite Off
        
        Pass {
            // Blend SrcAlpha OneMinusSrcAlpha
            // ColorMask RGB
            
            CGPROGRAM
            
            #pragma vertex vert  
            #pragma fragment fragRGB
            
            ENDCG
        }
        
        // Pass {   
        //     Blend SrcAlpha OneMinusSrcAlpha
        //     ColorMask A
                
        //     CGPROGRAM  
            
        //     #pragma vertex vert  
        //     #pragma fragment fragA
            
        //     ENDCG
        // }
    }
}
