Shader "postprocessing/bloom" {
	Properties {
		_uMainTex ( "main texture", 2D ) = "" {}
		_uSampleScale("ampleScale",float) = 1

		_uThreshold("Threshold",Vector) = (1,1,1,1)
		_uParams("Params",Vector) = (1,1,1,1)
	}
	
	CGINC

	#include "CG.cginc"
	#include "Sampling.cginc"

	uniform sampler2D _uMainTex;
	uniform sampler2D _uBloomTex;

	uniform float4 _uMainTex_TexelSize;
	uniform float  _uSampleScale;

	uniform float4 _uThreshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee
	uniform float4 _uParams; // x: clamp, yzw: unused

	struct appdata_t {
		float4 pos : POSITION;
		float2 texcoord : TEXCOORD0;
	};

	struct v2f {
		float4 pos : SV_POSITION;
		float2 texcoord : TEXCOORD0;
	};

	//
	// Quadratic color thresholding
	// curve = (threshold - knee, knee * 2, 0.25 / knee)
	//
	half4 QuadraticThreshold(half4 color, half threshold, half3 curve)
	{
		// Pixel brightness
		half br = max(max(color.r, color.g), color.b);
		
		// Under-threshold part: quadratic curve
		half rq = clamp(br - curve.x, 0.0, curve.y);
		rq = curve.z * rq * rq;

		// Combine and apply the brightness response curve.
		color *= max(rq, br - threshold) / max(br, EPSILON);

		return color;
	}

	half4 Prefilter(half4 color, float2 uv)
	{
		color = min(_uParams.x, color); // clamp to max
		color = QuadraticThreshold(color, _uThreshold.x, _uThreshold.yzw);
		return color;
	}

	half4 FragPrefilter13(v2f i) : SV_Target
	{
		half4 color = DownsampleBox13Tap(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw);
		return Prefilter(color, i.texcoord);
	}

	half4 FragPrefilter4(v2f i) : SV_Target
	{
		half4 color = DownsampleBox4Tap(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw);
		return Prefilter(color, i.texcoord);
	}

	// ----------------------------------------------------------------------------------------
	// Downsample

	half4 FragDownsample13(v2f i) : SV_Target
	{
		half4 color = DownsampleBox13Tap(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw);
		return color;
	}

	half4 FragDownsample4(v2f i) : SV_Target
	{
		half4 color = DownsampleBox4Tap(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw);
		return color;
	}

	// ----------------------------------------------------------------------------------------
	// Upsample & combine

	half4 Combine(half4 bloom, float2 uv)
	{
		half4 color = tex2D(_uBloomTex, uv);
		return bloom + color;
	}

	half4 FragUpsampleTent(v2f i) : SV_Target
	{
		half4 bloom = UpsampleTent(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw, _uSampleScale);
		return Combine(bloom, i.texcoord);
	}

	half4 FragUpsampleBox(v2f i) : SV_Target
	{
		half4 bloom = UpsampleBox(_uMainTex, i.texcoord, _uMainTex_TexelSize.zw, _uSampleScale);
		return Combine(bloom, i.texcoord);
	}


	v2f vert (appdata_t v) {
		v2f o;
		o.pos = mul( uMVPMatrix, v.pos );
		o.texcoord = v.texcoord;
		return o;
	}

	ENDCG

	SubShader {
		Cull Off 
		ZTest Always
		ZWrite Off 
		
		// 0: Prefilter 13 taps
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragPrefilter13
			
			ENDCG
		}

		// 1: Prefilter 4 taps
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragPrefilter4
			
			ENDCG
		}

		 // 2: Downsample 13 taps
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragDownsample13
			
			ENDCG
		}

		// 3: Downsample 4 taps
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragDownsample4
			
			ENDCG
		}

		// 4: Upsample tent filter
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragUpsampleTent
			
			ENDCG
		}

		// 5: Upsample box filter
		Pass {
			CGPROGRAM

			#pragma vertex vert
            #pragma fragment FragUpsampleBox
			
			ENDCG
		}
	}
}