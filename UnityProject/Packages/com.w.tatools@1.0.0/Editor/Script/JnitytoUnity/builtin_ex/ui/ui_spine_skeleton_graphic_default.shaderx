Shader "SpineUI/SkeletonGraphic" {
    Properties {
        _uMainTex ("Sprite Texture", 2D) = "white" {}
        _uMainTex_ST("Texture ST", Vector) = (1, 1, 0, 0)
        _uColor ("Tint", Color) = (1,1,1,1)        
        _StraightAlphaInput("Straight Alpha Texture", Range(0,1)) = 0
        
        _uStencilComp ("Stencil Comparison", Float) = 7
        _uStencil ("Stencil ID", Float) = 0
        _uStencilOp ("Stencil Operation", Float) = 0
        _uStencilWriteMask ("Stencil Write Mask", Float) = 255
        _uStencilReadMask ("Stencil Read Mask", Float) = 255

        _uColorMask ("Color Mask", Float) = 15
    }
    SubShader {
        Tags
        {        
            "Queue"="Transparent"
            "PreviewType"="Plane"
        }
        
        Stencil
        {
            Ref [_uStencil]
            Comp [_uStencilComp]
            Pass [_uStencilOp]
            ReadMask [_uStencilReadMask]
            WriteMask [_uStencilWriteMask]
        }

        Cull Off
        ZTest Less
        ZWrite Off
        Blend One OneMinusSrcAlpha
        ColorMask [_uColorMask]
        
        Pass {
            
            CGPROGRAM
            
            #include "CG.cginc"
            #include "UI.cginc"
            
            #pragma multi_compile_local _ UI_CLIP_RECT
            #pragma multi_compile_local _ UI_ALPHACLIP
            
            uniform sampler2D _uMainTex;
            uniform float4    _uMainTex_ST;
            uniform float4    _uColor;
            uniform float     _StraightAlphaInput;
            uniform fixed4    gTextureSampleAdd;
            uniform float4    gClipRect;
            uniform float     gUIMaskSoftnessX;
            uniform float     gUIMaskSoftnessY;
            
            struct appdata_t {
                float4 pos   : POSITION;
                float4 color : COLOR;
                float2 uv    : TEXCOORD0;
            };
            struct v2f {
                float4 pos      : SV_POSITION;
                fixed4 color    : COLOR;
                float2 uv       : TEXCOORD0;
                float4 worldpos : TEXCOORD1;
                half4  mask     : TEXCOORD2;
            };
            v2f vert (appdata_t v) {
                v2f o;
                o.pos = mul( uMVPMatrix, v.pos );
                o.uv = TRANSFORM_TEX(v.uv.xy, _uMainTex);
                o.worldpos = mul( uMMatrix, v.pos );
                o.color = v.color * _uColor;

                float2 pixelSize = o.pos.w;
                pixelSize /= float2(1, 1) * abs(mul((float2x2)uPMatrix, uViewportSize.xy));

                float4 clampedRect = clamp(gClipRect, -2e10, 2e10);
                float2 maskUV = (o.worldpos.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);                
                o.mask = half4(o.worldpos.xy * 2 - clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(gUIMaskSoftnessX, gUIMaskSoftnessY) + abs(pixelSize.xy)));

                return o;
            }
            float4 frag(v2f i) : SV_TARGET {
                half4 color = i.color * (tex2D(_uMainTex, i.uv) + gTextureSampleAdd);

                if(_StraightAlphaInput > 0){
                    color.rgb *= color.a;
                }                

                #ifdef UI_CLIP_RECT
                    half2 m = saturate((gClipRect.zw - gClipRect.xy - abs(i.mask.xy)) * i.mask.zw);
                    color.a *= m.x * m.y;
                #endif

                #ifdef UI_ALPHACLIP
                    clip (color.a - 0.001);
                #endif

                color.rgb *= color.a;
                return color;
            }
            
            ENDCG
        }
    }
}