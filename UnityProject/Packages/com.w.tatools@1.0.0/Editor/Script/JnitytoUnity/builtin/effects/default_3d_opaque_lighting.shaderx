Shader "default_3d_opaque_lighting" {
    Properties {
        _uMainTex ("Default Texture", 2D) = "" {}
        _uColor ("Tint Color", Color) = (1.0, 1.0, 1.0, 1.0)
        _uStrength ("Strength", Vector) = (0.2, 0.8, 0.0, 0.0)
        _uLightDirection ("Light Direction", Vector) = (0.3, -0.2, -1.0, 0.0) 
    }

    SubShader {
        Tags { "Queue"="Geometry" }

        Pass {            
            Blend Off
            Cull Back
            ZTest Less
            ZWrite On
            

            CGPROGRAM

            uniform sampler2D _uMainTex;
            uniform float4 _uColor;
            uniform float4 _uStrength;
            uniform float4 _uLightDirection;

            struct a2v {
                float4 pos : POSITION;
                float3 normal : NORMAL;
                float2 tex : TEXCOORD0;
            };

            struct v2f {
                float4 pos : SV_POSITION;
                float3 viewNormal : TEXCOORD0;
                float2 tex : TEXCOORD1;
            };

            v2f vert(a2v i) {
                v2f o;
                o.pos = mul(uMVPMatrix, i.pos);
                o.tex = float2(i.tex.x, 1.0 - i.tex.y);
                o.viewNormal = normalize(mul(uMVMatrix, float4(i.normal, 0.0))).xyz;
                return o;
            }

            float4 frag(v2f i) : SV_TARGET {
                float diff = max(dot(i.viewNormal, -normalize(_uLightDirection.xyz)), 0.0);
                float4 color = _uColor * tex2D(_uMainTex, i.tex);
                float3 result = (_uStrength.x + diff * _uStrength.y) * color.xyz;
                return float4(result, 1.0);
            }

            ENDCG
        }
    }
}